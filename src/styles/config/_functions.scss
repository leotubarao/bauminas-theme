// Zoom

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-up($breakpoint) {

    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    @each $prop, $abbrev in (zoom: z) {

      @each $size, $length in $zooms {
        .#{$abbrev}#{$infix}-#{$size} {
          #{$prop}: $length !important;
        }
      }
    }
  }
}


// Grid system for Header

@mixin make-container-grid-layout($template-columns: $grid-template-columns, $max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {

      $calc-container: ($container-max-width / $template-columns);

      grid-template-columns: 1fr repeat($template-columns, $calc-container) 1fr;
    }
  }
}


// Don't float below size

@each $breakpoint in map-keys($grid-breakpoints) {
  @include media-breakpoint-down($breakpoint) {

    $infix: breakpoint-infix($breakpoint, $grid-breakpoints);

    .float#{$infix}-none > * {
      float: none !important;
    }
  }
}


@function ltco_color($key: "blue") {
  @return map-get($ltco-colors, $key);
}

%triade-grid {
  display: grid;
  gap: 2rem;

  @include media-breakpoint-up(sm) {
    grid-template-columns: repeat(2, 1fr);
  }

  @include media-breakpoint-up(md) {
    gap: 3rem;
  }

  @include media-breakpoint-up(xl) {
    grid-template-columns: repeat(3, 1fr);
  }
}
